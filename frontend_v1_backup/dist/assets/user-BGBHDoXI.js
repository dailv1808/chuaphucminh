import{g as e}from"./config-BvOGzWpZ.js";/* empty css             */import"./auth-BxmWGv8U.js";document.addEventListener("alpine:init",()=>{Alpine.data("usersData",()=>({users:[],filteredUsers:[],searchQuery:"",showUserModal:!1,showDeleteModal:!1,selectedUser:null,isLoading:!0,showNotification:!1,notificationMessage:"",notificationType:"success",userForm:{username:"",full_name:"",email:"",phone_number:"",password:"",password2:"",is_admin:!1,is_active:!0},init(){this.fetchUsers()},async fetchUsers(){try{this.isLoading=!0;const s=localStorage.getItem("access_token"),i=await fetch(e("/api/accounts/users/"),{headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"}});if(!i.ok)throw new Error("Network response was not ok");const t=await i.json();this.users=t,this.filteredUsers=[...this.users]}catch(s){console.error("Error fetching users:",s),this.showNotificationMessage("Có lỗi xảy ra khi tải dữ liệu người dùng","error")}finally{this.isLoading=!1}},filterUsers(){if(!this.searchQuery)return void(this.filteredUsers=[...this.users]);const e=this.searchQuery.toLowerCase();this.filteredUsers=this.users.filter(s=>s.username&&s.username.toLowerCase().includes(e)||s.full_name&&s.full_name.toLowerCase().includes(e)||s.email&&s.email.toLowerCase().includes(e)||s.phone_number&&s.phone_number.includes(e))},showNotificationMessage(e,s="success"){this.notificationMessage=e,this.notificationType=s,this.showNotification=!0,setTimeout(()=>{this.showNotification=!1},3e3)},openAddUserModal(){this.selectedUser=null,this.resetUserForm(),this.showUserModal=!0},openEditUserModal(e){this.selectedUser=e,this.userForm={username:e.username,full_name:e.full_name||"",email:e.email||"",phone_number:e.phone_number||"",password:"",password2:"",is_admin:e.is_admin||!1,is_active:e.is_active||!0},this.showUserModal=!0},closeUserModal(){this.showUserModal=!1,this.resetUserForm()},resetUserForm(){this.userForm={username:"",full_name:"",email:"",phone_number:"",password:"",password2:"",is_admin:!1,is_active:!0}},confirmDelete(e){this.selectedUser=e,this.showDeleteModal=!0},async saveUser(){try{const s=localStorage.getItem("access_token");let i;if(this.selectedUser){const t=e("/api/accounts/profile/");i=await fetch(t,{method:"PUT",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},body:JSON.stringify({username:this.userForm.username,full_name:this.userForm.full_name,email:this.userForm.email,phone_number:this.userForm.phone_number,is_admin:this.userForm.is_admin,is_active:this.userForm.is_active})})}else{if(this.userForm.password!==this.userForm.password2)throw new Error("Mật khẩu không khớp");const t=e("/api/accounts/register/");i=await fetch(t,{method:"POST",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},body:JSON.stringify({username:this.userForm.username,full_name:this.userForm.full_name,email:this.userForm.email,phone_number:this.userForm.phone_number,password:this.userForm.password,is_admin:this.userForm.is_admin,is_active:this.userForm.is_active})})}if(!i.ok){const e=await i.json();throw new Error(e.message||"Có lỗi xảy ra")}this.showNotificationMessage(this.selectedUser?"Cập nhật người dùng thành công":"Thêm người dùng mới thành công","success"),this.fetchUsers(),this.closeUserModal()}catch(s){console.error("Error saving user:",s),this.showNotificationMessage(s.message||"Có lỗi xảy ra khi lưu người dùng","error")}},async deleteUser(){try{const s=localStorage.getItem("access_token"),i=e("/api/accounts/profile/");if(!(await fetch(i,{method:"PATCH",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},body:JSON.stringify({username:this.selectedUser.username,is_active:!1})})).ok)throw new Error("Xóa người dùng không thành công");this.showNotificationMessage("Đã vô hiệu hóa người dùng thành công","success"),this.fetchUsers(),this.showDeleteModal=!1}catch(s){console.error("Error deleting user:",s),this.showNotificationMessage("Có lỗi xảy ra khi xóa người dùng","error")}}}))});
